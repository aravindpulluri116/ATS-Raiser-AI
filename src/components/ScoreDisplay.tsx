import React from 'react';
import { Award, TrendingUp, Target, FileText, CheckCircle, AlertTriangle, XCircle, Lightbulb, Download } from 'lucide-react';
import { ATSAnalysisResult } from '../services/geminiService';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ScoreDisplayProps {
  results: ATSAnalysisResult;
}

const ScoreDisplay: React.FC<ScoreDisplayProps> = ({ results }) => {
  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-400';
    if (score >= 60) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getScoreStatus = (score: number) => {
    if (score >= 80) return { icon: CheckCircle, text: 'Excellent', color: 'text-green-400' };
    if (score >= 60) return { icon: AlertTriangle, text: 'Good', color: 'text-yellow-400' };
    return { icon: XCircle, text: 'Needs Work', color: 'text-red-400' };
  };

  const exportToPDF = async () => {
    try {
      const element = document.getElementById('score-display');
      if (!element) return;

      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#0f172a'
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      const fileName = `ATS_Analysis_${results.fileName.replace(/\.[^/.]+$/, '')}_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try again.');
    }
  };

  const sections = [
    {
      key: 'keywords',
      title: 'Keyword Optimization',
      description: 'Relevance to job requirements',
      icon: Target
    },
    {
      key: 'formatting',
      title: 'Formatting & Structure',
      description: 'ATS readability',
      icon: FileText
    },
    {
      key: 'structure',
      title: 'Content Structure',
      description: 'Organization and flow',
      icon: TrendingUp
    },
    {
      key: 'length',
      title: 'Resume Length',
      description: 'Optimal length for ATS',
      icon: Award
    }
  ];

  return (
    <div className="space-y-8" id="score-display">
      {/* Analysis Source Indicator */}
      <div className={`card border-l-4 ${results.isFromGemini ? 'border-green-500 bg-green-500 bg-opacity-5' : 'border-red-500 bg-red-500 bg-opacity-5'}`}>
        <div className="flex items-center space-x-3">
          {results.isFromGemini ? (
            <>
              <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-sm">ü§ñ</span>
              </div>
              <div>
                <h3 className="font-medium text-green-400">AI Analysis Complete</h3>
                <p className="text-sm text-green-300">This analysis was generated by Google Gemini AI based on your actual resume content.</p>
              </div>
            </>
          ) : (
            <>
              <div className="w-10 h-10 bg-red-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-sm">‚ö†Ô∏è</span>
              </div>
              <div>
                <h3 className="font-medium text-red-400">Analysis Failed</h3>
                <p className="text-sm text-red-300">Unable to extract readable text from your file. This is a fallback analysis.</p>
              </div>
            </>
          )}
        </div>
      </div>

      {/* Overall Score */}
      <div className="card text-center">
        <div className="space-y-6">
          <div>
            <h2 className="text-2xl font-heading font-bold text-slate-100 mb-2">
              Overall ATS Score
            </h2>
            <p className="text-slate-400">
              Based on analysis of {results.fileName}
            </p>
          </div>
          
          <div className="relative w-48 h-48 mx-auto">
            <svg className="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
              <circle
                cx="50"
                cy="50"
                r="40"
                stroke="#475569"
                strokeWidth="8"
                fill="none"
              />
              <circle
                cx="50"
                cy="50"
                r="40"
                stroke="url(#gradient)"
                strokeWidth="8"
                fill="none"
                strokeDasharray={`${results.overallScore * 2.51} 251`}
                strokeLinecap="round"
                className="transition-all duration-1000 ease-out"
              />
              <defs>
                <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%" stopColor="#3b82f6" />
                  <stop offset="100%" stopColor="#06b6d4" />
                </linearGradient>
              </defs>
            </svg>
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="text-center">
                <div className={`text-4xl font-bold ${getScoreColor(results.overallScore)}`}>
                  {results.overallScore}%
                </div>
                <div className="text-slate-400">ATS Score</div>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-center space-x-2">
            {(() => {
              const status = getScoreStatus(results.overallScore);
              return (
                <>
                  <status.icon className={`h-5 w-5 ${status.color}`} />
                  <span className={`font-medium ${status.color}`}>{status.text}</span>
                </>
              );
            })()}
          </div>
        </div>
      </div>

      {/* Section Scores */}
      <div className="grid md:grid-cols-2 gap-6">
        {sections.map((section) => {
          const sectionData = results.sections[section.key];
          const status = getScoreStatus(sectionData.score);
          
          return (
            <div key={section.key} className="card">
              <div className="flex items-start space-x-4">
                <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center flex-shrink-0">
                  <section.icon className="h-6 w-6 text-white" />
                </div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-heading font-semibold text-slate-100">{section.title}</h3>
                    <span className={`text-xl font-bold ${getScoreColor(sectionData.score)}`}>
                      {sectionData.score}%
                    </span>
                  </div>
                  <p className="text-slate-400 text-sm mb-3">{section.description}</p>
                  <div className="flex items-center space-x-2">
                    <status.icon className={`h-4 w-4 ${status.color}`} />
                    <span className={`text-sm font-medium ${status.color}`}>{sectionData.status}</span>
                  </div>
                  <div className="mt-3 w-full bg-slate-700 rounded-full h-2">
                    <div
                      className="bg-gradient-to-r from-blue-500 to-cyan-500 h-2 rounded-full transition-all duration-1000 ease-out"
                      style={{ width: `${sectionData.score}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Keyword Analysis */}
      <div className="card">
        <h3 className="text-xl font-heading font-semibold text-slate-100 mb-6">
          Keyword Analysis
        </h3>
        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-slate-100 mb-3 flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-400" />
              <span>Matched Keywords</span>
            </h4>
            <div className="flex flex-wrap gap-2">
              {results.keywordAnalysis.matched.length > 0 ? (
                results.keywordAnalysis.matched.map((keyword: string, index: number) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-green-900 bg-opacity-30 text-green-400 rounded-full text-sm border border-green-600"
                  >
                    {keyword}
                  </span>
                ))
              ) : (
                <p className="text-slate-400 text-sm">No keywords matched</p>
              )}
            </div>
          </div>
          <div>
            <h4 className="font-medium text-slate-100 mb-3 flex items-center space-x-2">
              <XCircle className="h-4 w-4 text-red-400" />
              <span>Missing Keywords</span>
            </h4>
            <div className="flex flex-wrap gap-2">
              {results.keywordAnalysis.missing.length > 0 ? (
                results.keywordAnalysis.missing.map((keyword: string, index: number) => (
                  <span
                    key={index}
                    className="px-3 py-1 bg-red-900 bg-opacity-30 text-red-400 rounded-full text-sm border border-red-600"
                  >
                    {keyword}
                  </span>
                ))
              ) : (
                <p className="text-slate-400 text-sm">No missing keywords identified</p>
              )}
            </div>
          </div>
        </div>
        <div className="mt-6 p-4 bg-blue-500 bg-opacity-10 rounded-lg border border-blue-500">
          <p className="text-sm text-slate-300">
            <strong className="text-slate-100">Keyword Density:</strong> {results.keywordAnalysis.density}% 
            <span className="ml-2">(Recommended: 2-3%)</span>
          </p>
        </div>
      </div>

      {/* Suggestions */}
      {results.suggestions && results.suggestions.length > 0 && (
        <div className="card">
          <h3 className="text-xl font-heading font-semibold text-slate-100 mb-6 flex items-center space-x-2">
            <Lightbulb className="h-6 w-6 text-yellow-400" />
            <span>Improvement Suggestions</span>
          </h3>
          <div className="space-y-4">
            {results.suggestions.map((suggestion: string, index: number) => (
              <div key={index} className="flex items-start space-x-3 p-4 bg-slate-800 rounded-lg border border-slate-600">
                <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                <p className="text-slate-300">{suggestion}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Export Button */}
      <div className="flex justify-end">
        <button
          onClick={exportToPDF}
          className="button-primary flex items-center space-x-2"
        >
          <Download className="h-4 w-4" />
          <span>Export Report</span>
        </button>
      </div>
    </div>
  );
};

export default ScoreDisplay;